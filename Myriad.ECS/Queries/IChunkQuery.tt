<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 16;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
#pragma warning disable CA1822 // Mark members as static

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var sumij = i;
#>
namespace Myriad.ECS.Queries
{
	public interface <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		where <#= Constraints(sumij, 8) #>
	{
		public void Execute(ReadOnlySpan<Entity> e, <#= Refs(0, i) #>);
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		/// <summary>
        /// Execute a query which executes on entire chunks.
        /// </summary>
        /// <typeparam name="TQ">The type of the query</typeparam>
<# for (var k = 0; k < sumij; k++)
{
#>
        /// <typeparam name="T<#= k #>"></typeparam>
<#
}
#>
        /// <param name="q">The TQ instance which will be executed for each chunk</param>
        /// <param name="query">A query expressing which entities to execute this query over</param>
        /// <returns>The total number of entities processed</returns>
		public int ExecuteChunk<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(sumij, 12) #>
			where TQ : <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

<# for (var k = 0; k < sumij; k++)
{
#>
		    var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				var chunks = archetype.Chunks;
				for (var c = chunks.Count - 1; c >= 0; c--)
				{
					var chunk = chunks[c];

					var entities = chunk.Entities;
					if (entities.Length == 0)
						continue;

					count += entities.Length;

<# for (var k = 0; k < sumij; k++)
{
#>
					var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
<#
}
#>

					q.Execute(entities, <#= CallParameters(sumij) #>);
				}
			}

			return count;
		}

		public int ExecuteChunkParallel<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(sumij, 12) #>
			where TQ : <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

<# for (var k = 0; k < sumij; k++)
{
#>
		    var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
				var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				Parallel.For(0, archetype.Chunks.Count, c =>
				{
					var chunk = archetype.Chunks[c];

					var entities = chunk.Entities;
					if (entities.Length == 0)
						return;

					Interlocked.Add(ref count, entities.Length);

<# for (var k = 0; k < sumij; k++)
{
#>
					var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
<#
}
#>

					q.Execute(entities, <#= CallParameters(sumij) #>);
				});
			}

			return count;
		}
	}
}

<#
}
#>


<#+ 
	static string Constraints(int count, int spaces = 4)
    {
        var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Mod(int index, int mutable, int @readonly)
	{
		return index < mutable ? "ref" : "in";
	}

	static string Name(int mutable)
	{
		return "IChunkQuery" + mutable;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"Span<T{x}> t{x}")
		);

		return str;
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"t{x}")
        );

        return str;
    }
#>