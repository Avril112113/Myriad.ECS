<#
void EmitParallelWorkLoopSetup(string workItemName)
{
#>
			#region Parallel Work Loop Setup
			// Borrow a counter which will be used to keep track of all in-progress work
			using var workCounterRental = Pool<CountdownEventContainer>.Rent();
			var workCounter = workCounterRental.Value.Event;
			workCounter.Reset(1);

			// Create parallel workers
			var processors = ThreadPool.Threads;
			var workersArr = ArrayPool<ParallelQueryWorker<<#= workItemName #>>?>.Shared.Rent(processors);
			var workers = workersArr.AsMemory(0, processors);
			for (var i = 0; i < workers.Length; i++)
			{
				workersArr[i] = Pool<ParallelQueryWorker<<#= workItemName #>>>.Get();
				workersArr[i]!.Configure(workersArr, workCounter);
			}

			// Start the workers. Even though there is no work they cannot exit yet because
			// the counter was reset to 1 above.
			foreach (var item in workersArr)
			{
				if (item != null)
					ThreadPool.QueueUserWorkItem(item);
			}

			// Enqueue work to this index
			var workerEnqueueIdx = 0;
			#endregion
<#
}
#>

<#
void EmitEnqueueParallelWork(string itemName, bool incrementWorkCount = true)
{
#>
						#region Parallel Work Loop Add To Queue
<# if (incrementWorkCount)
{
#>
						// Increment counter before adding the work to a worker
						workCounter.AddCount();
<#
}
#>
						// Add work to a worker
						workersArr[workerEnqueueIdx]!.Enqueue(<#= itemName #>);

						workerEnqueueIdx++;
						if (workerEnqueueIdx >= workers.Length)
							workerEnqueueIdx = 0;
						#endregion
<#
}
#>

<#
void EmitParallelWorkLoopWaitAndTeardown(string workItemName)
{
#>
			#region Parallel Work Loop Teardown
			// Collection of exceptions thrown in any work
			List<Exception>? exceptions = null;

			// Clear the 1 that was added at the start (when the counter was reset)
			workCounter.Signal();

			// Try to steal some work to do on this thread
			while (!workCounter.IsSet)
			{
				for (var i = 0; i < workers.Length && !workCounter.IsSet; i++)
				{
					if (workersArr[i]!.Steal(out var work))
					{
						workCounter.Signal();
						try
						{
							work.Execute();
						}
						catch (Exception ex)
						{
							exceptions ??= [ ];
							exceptions.Add(ex);
							break;
						}
					}
				}
			}

			// Wait for work to finish
			workCounter.Wait();

			// Recycle workers
			for (var i = 0; i < workers.Length; i++)
			{
				var worker = workersArr[i]!;
				worker.FinishEvent.Wait();
				worker.Clear(ref exceptions);
				Pool.Return(worker);
			}
			Array.Clear(workersArr, 0, workersArr.Length);
			ArrayPool<ParallelQueryWorker<<#= workItemName #>>>.Shared.Return(workersArr!);

			// Throw collected exceptions
			if (exceptions is { Count: > 0 })
				throw new AggregateException(exceptions);
			#endregion
<#
}
#>