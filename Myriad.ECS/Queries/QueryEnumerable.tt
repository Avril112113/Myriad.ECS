<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int PARAM_COUNT = 9;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.Collections;
using Myriad.ECS.Worlds.Chunks;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable CheckNamespace
// ReSharper disable ArrangeAccessorOwnerBody
#pragma warning disable CA1822 // Mark members as static

<# for (var i = 0; i <= PARAM_COUNT; i++)
{
    var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    if (i > 0)
        tparams = $"<{tparams}>";

    var refparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x));

    var refparamstup = refparams;
    if (i == 0)
    {
        refparamstup = "Entity";
    }
    else
    {
        refparamstup = "RefTuple" + i + tparams;
    }
#>
namespace Myriad.ECS.Queries
{
    public readonly struct QueryResultEnumerable<#= i #><#= tparams #>
        <#= Constraints(i, 8) #>
    {
        private readonly QueryDescription _query;

        internal QueryResultEnumerable<#= i #>(QueryDescription query)
        {
            _query = query;
        }

        public QueryResultEnumerator<#= i #><#= tparams #> GetEnumerator()
        {
            return new QueryResultEnumerator<#= i #><#= tparams #>(
                _query.GetArchetypes()
            );
        }
    }

    public ref struct QueryResultEnumerator<#= i #><#= tparams #>
        <#= Constraints(i, 8) #>
    {
<# for (var k = 0; k < i; k++)
{
#>
        private static readonly ComponentID C<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

        private List<QueryDescription.ArchetypeMatch>.Enumerator _archetypesEnumerator;
        private List<Chunk>.Enumerator _chunksEnumerator;
        private int _entityIndex = -1;
        private bool _initialized = false;

        private ReadOnlySpan<Entity> SpanEntities = default;
<# for (var k = 0; k < i; k++)
{
#>
        private Span<T<#= k #>> Span<#= k #> = default;
<#
}
#>

        internal QueryResultEnumerator<#= i #>(FrozenOrderedListSet<QueryDescription.ArchetypeMatch> archetypes)
        {
            _archetypesEnumerator = archetypes.GetEnumerator();
        }

        public <#= refparamstup #> Current
        {
            get
            {
<# 
if (i == 0)
{
#>
                return SpanEntities[_entityIndex];
<#
}
else
{
#>
                return new <#= refparamstup #>(
                    SpanEntities[_entityIndex],
<#
for (var k = 0; k < i; k++)
{
#>
                    ref Span<#= k #>[_entityIndex]<#= k < i - 1 ? "," : "" #>
<#
}
#>
                );
<#
}
#>            
            }
        }

        private void GetChunkSpans()
        {
            var chunk = _chunksEnumerator.Current;

            SpanEntities = chunk.Entities;
<# for (var k = 0; k < i; k++)
{
#>
            Span<#= k #> = chunk.GetSpan<<#= "T" + k #>>(C<#= k #>);
<#
}
#>
        }

        private bool NextArchetype()
        {
            while (true)
            {
                // If there are no archetypes exit with false
                if (!_archetypesEnumerator.MoveNext())
                    return false;

                // Try to move to the next (first) chunk of this archetype. Might fail if there
                // are no chunks in this archetype.
                _chunksEnumerator = _archetypesEnumerator.Current.Archetype.GetChunkEnumerator();
                if (NextChunk())
                    break;
            }

            return true;
        }

        private bool NextChunk()
        {
            if (!_chunksEnumerator.MoveNext())
                return false;

            GetChunkSpans();
            _entityIndex = 0;
            return true;
        }

        public bool MoveNext()
        {
            _entityIndex++;
            if (_entityIndex < SpanEntities.Length)
                return true;

            if (!_initialized)
            {
                _initialized = true;

                if (!NextArchetype())
                    return false;
                return true;
            }

            if (!NextChunk())
                if (!NextArchetype())
                    return false;

            return true;
        }

        // ReSharper disable once UnusedMember.Global (Justification: used by enumerator)
        public void Dispose()
        {
            _archetypesEnumerator.Dispose();
            _chunksEnumerator.Dispose();
        }
    }
}

namespace Myriad.ECS.Worlds
{
    public partial class World
    {
        private readonly List<(ComponentID[], QueryDescription)> _queryCache<#= i #> = [ ];

        [System.Diagnostics.Contracts.Pure]
        [JetBrains.Annotations.Pure]
        public QueryResultEnumerable<#= i #><#= tparams #> Query<#= tparams #>(QueryDescription query)
            <#= Constraints(i, 12) #>
        {
            return new QueryResultEnumerable<#= i #><#= tparams #>(
                query
            );
        }

        [System.Diagnostics.Contracts.Pure]
        [JetBrains.Annotations.Pure]
        public QueryResultEnumerable<#= i #><#= tparams #> Query<#= tparams #>()
            <#= Constraints(i, 12) #>
        {
            // Find query that matches these types
            var query = default(QueryDescription);
            foreach (var item in _queryCache<#= i #>)
            {
<# for (var k = 0; k < i; k++)
{
#>
                if (!item.Item1.Contains(ComponentID<<#= "T" + k #>>.ID))
                    continue;
<#
}
#>

                query = item.Item2;
                break;
            }

            // Didn't find one, create it now and store it in the cache
            if (query == null)
            {
                query = new QueryBuilder()
<# for (var k = 0; k < i; k++)
{
#>
                    .Include<<#= "T" + k #>>()
<#
}
#>
                    .Build(this);

                _queryCache<#= i #>.Add(([
<# for (var k = 0; k < i; k++)
{
#>
                    ComponentID<<#= "T" + k #>>.ID,
<#
}
#>
                ], query));
            }

            return new QueryResultEnumerable<#= i #><#= tparams #>(
                query
            );
        }
    }
}

<#
}
#>


<#+ 
    static string Constraints(int count, int spaces = 4)
    {
        if (count == 0)
            return "";

        var prefix = new string(' ', spaces);
        var str = "where " + string.Join(
            $"\r\n{prefix}where ",
            Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
        );

        return str;
    }

    static string Name(int mutable)
    {
        return "IQuery" + mutable;
    }

    static string Refs(int start, int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
        );

        return str;
    }

    static string Ins(int start, int count)
    {
        return string.Join(
            ", ",
            Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
        );
    }

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }
#>