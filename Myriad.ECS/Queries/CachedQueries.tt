<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int PARAM_COUNT = 16;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.xxHash;
using Myriad.ECS.Collections;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;

#if NETSTANDARD2_1
using Myriad.ECS.Extensions;
#endif

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable CheckNamespace
// ReSharper disable ArrangeAccessorOwnerBody

namespace Myriad.ECS.Worlds;

public partial class World
{
    // Cache of all queries with 1 included components.
    private readonly SortedList<int, QueryDescription> _queryCache1 = [ ];
    private readonly ReaderWriterLockSlim _lock1 = new();

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    private QueryDescription GetCachedQuery<T0>()
        where T0 : IComponent
    {
        var component = ComponentID<T0>.ID.Value;

        _lock1.EnterReadLock();
        try
        {
            // Find query that matches this types
            if (_queryCache1.TryGetValue(component, out var q))
                return q;
        }
        finally
        {
            _lock1.ExitReadLock();
        }

        _lock1.EnterWriteLock();
        try
        {
            // Find query that matches this types
            if (_queryCache1.TryGetValue(component, out var q))
                return q;

            // Didn't find one, create it now
            var query = new QueryBuilder()
                .Include<T0>()
                .Build(this);

            // Add query to the cache
            _queryCache1[component] = query;

            return query;
        }
        finally
        {
            _lock1.ExitWriteLock();
        }
    }

    // Cache of all queries with 2 included components. Key is the 2 component IDs combined together
    private readonly SortedList<long, QueryDescription> _queryCache2 = [ ];
    private readonly ReaderWriterLockSlim _lock2 = new();

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    private QueryDescription GetCachedQuery<T0, T1>()
        where T0 : IComponent
        where T1 : IComponent
    {
        var u = new Union64
        {
            I0 = ComponentID<T0>.ID.Value,
            I1 = ComponentID<T1>.ID.Value,
        };

        // Sort them into order
        if (u.I0 > u.I1)
            (u.I0, u.I1) = (u.I1, u.I0);

        var key = u.Long;

        _lock2.EnterReadLock();
        try
        {
            // Find query that matches this types
            if (_queryCache2.TryGetValue(key, out var q))
                return q;
        }
        finally
        {
            _lock2.ExitReadLock();
        }

        _lock2.EnterWriteLock();
        try
        {
            // Find query that matches this types
            if (_queryCache2.TryGetValue(key, out var q))
                return q;

            // Didn't find one, create it now
            var query = new QueryBuilder()
                .Include<T0>()
                .Include<T1>()
                .Build(this);

            // Add query to the cache
            _queryCache2[key] = query;

            return query;
        }
        finally
        {
            _lock2.ExitWriteLock();
        }
    }

<# for (var i = 3; i <= PARAM_COUNT; i++)
{
    var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    if (i > 0)
        tparams = $"<{tparams}>";

    var refparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x));

    var refparamstup = refparams;
    if (i == 0)
    {
        refparamstup = "Entity";
    }
    else
    {
        refparamstup = "RefTuple" + i + tparams;
    }
#>

    // Cache of all queries with <#= i #> included components. 
    // Key is the hash of the sorted component IDs.
    // The value has a list of tuples, containing:
    // - The actual components for this tuple item
    // - The query itself
    private readonly SortedList<ulong, List<(int[], QueryDescription)>> _queryCache<#= i #> = [ ];

    private readonly ReaderWriterLockSlim _lock<#= i #> = new();

    /// <summary>
    /// Get a query that finds entities which include all of the given types. This query
    /// will be shared with other requests for the same set of types.
    /// </summary>
    /// <returns>A query that finds entities which include all of the given types</returns>
    <#= CoverageAttribute(i) #>
    private QueryDescription GetCachedQuery<#= tparams #>()
        <#= Constraints(i, 8) #>
    {
        // Accumulate all components in ascending order
        Span<int> orderedComponents = [
<# for (var k = 0; k < i; k++)
{
#>
            ComponentID<<#= "T" + k #>>.ID.Value,
<#
}
#>
        ];
<# if (i > 1)
{
#>
        orderedComponents.Sort();
<#
}
#>

        // Calculate hash of components, for fast rejection
        var byteSpan = MemoryMarshal.Cast<int, byte>(orderedComponents);
        var hash = xxHash64.ComputeHash(byteSpan, seed: 42);

        _lock<#= i #>.EnterReadLock();
        try
        {
            // Get the list of items with this hash
            if (_queryCache<#= i #>.TryGetValue(hash, out var list))
            {
                // Find query that matches these types
                foreach (var (c, q) in list)
                {
                    // Since the sequences are sorted by component ID these should be identical
                    // Comparing two int spans should be very fast (SIMD accelerated)
                    if (!orderedComponents.SequenceEqual(c))
                        continue;

                    return q;
                }
            }
        }
        finally
        {
            _lock<#= i #>.ExitReadLock();
        }

        // Didn't find query, create it now
        _lock<#= i #>.EnterWriteLock();
        try
        {
            // Get or create list of items with this hash
            if (!_queryCache<#= i #>.TryGetValue(hash, out var list))
            {
                list = [ ];
                _queryCache<#= i #>.Add(hash, list);
            }
            
            // Create query
            var query = new QueryBuilder()
<# for (var k = 0; k < i; k++)
{
#>
                .Include<<#= "T" + k #>>()
<#
}
#>
                .Build(this);

            // Add query to the cache
            list.Add((orderedComponents.ToArray(), query));

            return query;
        }
        finally
        {
            _lock<#= i #>.ExitWriteLock();
        }
    }

<#
}
#>

}


<#+ 
    static string CoverageAttribute(int index)
	{
		if (index < 4)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

    static string Constraints(int count, int spaces = 4)
    {
        if (count == 0)
            return "";

        var prefix = new string(' ', spaces);
        var str = "where " + string.Join(
            $"\r\n{prefix}where ",
            Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
        );

        return str;
    }

    static string Name(int mutable)
    {
        return "IQuery" + mutable;
    }

    static string Refs(int start, int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
        );

        return str;
    }

    static string Ins(int start, int count)
    {
        return string.Join(
            ", ",
            Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
        );
    }

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }
#>