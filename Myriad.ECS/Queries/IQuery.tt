<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Myriad.ECS.Worlds;
using Myriad.ParallelTasks;
using System.Runtime.CompilerServices;

namespace Myriad.ECS.Queries;

public interface IQuery
{
    public static abstract QueryBuilder QueryBuilder { get; }

	public Future Execute(QueryDescription query, World world);
}

<# for (var i = 1; i < 9; i++)
{
#>
public interface <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x)) #>>
    : IQuery
    where <#= Constraints(i) #>
{
    void Execute(Entity e, <#= Refs(0, i) #>);

	Future IQuery.Execute(QueryDescription query, World world)
    {
        foreach (var archetypeMatch in query.GetArchetypes())
        {
            foreach (var chunk in archetypeMatch.Archetype)
            {
                var entities = chunk.Entities;

<# for (var j = 0; j < i; j++)
{
#>
                var t<#= j #>span = chunk.GetMutable<T<#= j #>>();
                ref var t<#= j #> = ref t<#= j #>span[0];

<#
}
#>
                for (var i = 0; i < entities.Length; i++)
                {
                    Execute(entities[i], <#= CallParameters(i) #>);

<# for (var j = 0; j < i; j++)
{
#>
                    Unsafe.Add(ref t<#= j #>, 1);
<#
}
#>
                }
            }
        }

        return new Future();
    }
}

<#
}
#>


<#+ 
	static string Name(int parameters)
	{
		return "IQuery" + parameters;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

    static string Constraints(int count)
    {
        var str = string.Join(
			"\r\n    where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

    static string CallParameters(int count)
    {
        var str = string.Join(
			", ",
			Enumerable.Range(0, count).Select(x => $"ref t{x}")
		);

		return str;
    }
#>