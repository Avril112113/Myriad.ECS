<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 9;
#>
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;

using Parallel = System.Threading.Tasks.Parallel;
//using Parallel = ParallelTasks.Parallel;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable ConvertToPrimaryConstructor


<# for (var i = 1; i < PARAM_COUNT; i++)
{
	var delegate_type_params = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
	var delegate_wrapper_name = "QueryDelegateWrapper" + i;
	var delegate_call_params = string.Join(", ", Enumerable.Range(0, i).Select(x => $"ref t{x}"));
#>
namespace Myriad.ECS.Queries
{
	public delegate void QueryDelegate<<#= delegate_type_params #>>(
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	public delegate void QueryDelegateEntity<<#= delegate_type_params #>>(
		Entity entity,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	public delegate void QueryDelegateData<in TData, <#= delegate_type_params #>>(
		TData data,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	public delegate void QueryDelegateEntityData<in TData, <#= delegate_type_params #>>(
		TData data,
		Entity entity,
		<#= string.Join(", ", Enumerable.Range(0, i).Select(x => "ref T" + x + " t" + x)) #>
	);

	internal readonly struct <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>
		: IQuery<#= i #><<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateEntity<<#= delegate_type_params #>> _delegate;

		public <#= delegate_wrapper_name #>E(QueryDelegateEntity<<#= delegate_type_params #>> @delegate)
        {
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(e, <#= delegate_call_params #>);
		}
	}

	internal readonly struct <#= delegate_wrapper_name #><<#= delegate_type_params #>>
		: IQuery<#= i #><<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegate<<#= delegate_type_params #>> _delegate;

		public <#= delegate_wrapper_name #>(QueryDelegate<<#= delegate_type_params #>> @delegate)
        {
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(<#= delegate_call_params #>);
		}
	}

	internal readonly struct <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>
		: IQuery<#= i #><<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateEntityData<TData, <#= delegate_type_params #>> _delegate;
		private readonly TData _data;

		public <#= delegate_wrapper_name #>ED(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate)
        {
			_data = data;
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(_data, e, <#= delegate_call_params #>);
		}
	}

	internal readonly struct <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>
		: IQuery<#= i #><<#= delegate_type_params #>>
		where <#= Constraints(i, 12) #>
	{
		private readonly QueryDelegateData<TData, <#= delegate_type_params #>> _delegate;
		private readonly TData _data;

		public <#= delegate_wrapper_name #>D(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate)
        {
			_data = data;
            _delegate = @delegate;
        }

		public void Execute(Entity e, <#= Refs(0, i) #>)
		{
			_delegate(_data, <#= delegate_call_params #>);
		}
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		public void Query<<#= delegate_type_params #>>(QueryDelegateEntity<<#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			Execute<<#= delegate_wrapper_name #>E<<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>(@delegate)
			);
		}

		public void QueryParallel<<#= delegate_type_params #>>(QueryDelegateEntity<<#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			ExecuteParallel<<#= delegate_wrapper_name #>E<<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>E<<#= delegate_type_params #>>(@delegate)
			);
		}

		public void Query<<#= delegate_type_params #>>(QueryDelegate<<#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			Execute<<#= delegate_wrapper_name #><<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #><<#= delegate_type_params #>>(@delegate)
			);
		}

		public void QueryParallel<<#= delegate_type_params #>>(QueryDelegate<<#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			ExecuteParallel<<#= delegate_wrapper_name #><<#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #><<#= delegate_type_params #>>(@delegate)
			);
		}

		// --- //

		public void Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			Execute<<#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>(data, @delegate)
			);
		}

		public void QueryParallel<TData, <#= delegate_type_params #>>(TData data, QueryDelegateEntityData<TData, <#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			ExecuteParallel<<#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>ED<TData, <#= delegate_type_params #>>(data, @delegate)
			);
		}

		public void Query<TData, <#= delegate_type_params #>>(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			Execute<<#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>(data, @delegate)
			);
		}

		public void QueryParallel<TData, <#= delegate_type_params #>>(TData data, QueryDelegateData<TData, <#= delegate_type_params #>> @delegate)
			where <#= Constraints(i, 12) #>
		{
			ExecuteParallel<<#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>, <#= delegate_type_params #>>(
				new <#= delegate_wrapper_name #>D<TData, <#= delegate_type_params #>>(data, @delegate)
			);
		}
	}
}

<#
}
#>

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var sumij = i;
#>
namespace Myriad.ECS.Queries
{
	public interface <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		where <#= Constraints(sumij, 8) #>
	{
		public void Execute(Entity e, <#= Refs(0, i) #>);
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		public int Execute<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(sumij, 12) #>
			where TQ : <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

<# for (var k = 0; k < sumij; k++)
{
#>
			var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				count += archetype.EntityCount;

				var chunks = archetype.Chunks;
				for (var c = chunks.Count - 1; c >= 0; c--)
				{
					var chunk = chunks[c];

					var entities = chunk.Entities;
					if (entities.Length == 0)
						continue;

<# for (var k = 0; k < sumij; k++)
{
#>
					var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
<#
}
#>

					for (var i = entities.Length - 1; i >= 0; i--)
						q.Execute(entities[i], <#= CallParameters(sumij) #>);
				}
			}

			return count;
		}

		public int ExecuteParallel<TQ, <#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>(
			TQ q,
			QueryDescription? query = null,
			int batchSize = 16
		)
			where <#= Constraints(sumij, 12) #>
			where TQ : <#= Name(i) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
		{
			query ??= GetCachedQuery<<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

	<# for (var k = 0; k < sumij; k++)
	{
	#>
		var c<#= k #> = ComponentID<T<#= k #>>.ID;
	<#
	}
	#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				count += archetype.EntityCount;

				for (var c = 0; c < archetype.Chunks.Count; c++)
                {
                    var chunk = archetype.Chunks[c];

					var entityCount = chunk.EntityCount;
					if (entityCount == 0)
						continue;

					var numBatches = (int)Math.Ceiling(entityCount / (double)batchSize);

<# for (var k = 0; k < sumij; k++)
{
#>
					var t<#= k #> = chunk.GetComponentArray<T<#= k #>>(c<#= k #>);
<#
}
#>

					Parallel.For(0, numBatches, b =>
                    {
						var start = b * batchSize;
						var end = Math.Min(start + batchSize, entityCount);

						for (var i = start; i < end; i++)
						{
							var entities = chunk.Entities;
							q.Execute(entities[i], <#= CallParameters(sumij) #>);
						}
					});
				}
			}

			return count;
		}
	}
}
<#
}
#>


<#+ 
	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Name(int mutable)
	{
		return "IQuery" + mutable;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }
#>