<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 16;
#>
using System.Diagnostics;
using Myriad.ECS.Queries;
using Myriad.ECS.IDs;
using Myriad.ECS.Worlds.Archetypes;

using Parallel = System.Threading.Tasks.Parallel;
//using Parallel = ParallelTasks.Parallel;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable ConvertToPrimaryConstructor

<# for (var i = 1; i <= PARAM_COUNT; i++)
{
	var queryConstraints = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
#>
namespace Myriad.ECS.Queries
{
	public interface <#= Name(i) #><<#= queryConstraints #>>
		where <#= Constraints(i, 8) #>
	{
		public void Execute(Entity e, <#= Refs(0, i) #>);
	}
}

namespace Myriad.ECS.Worlds
{
	public partial class World
	{
		public int Execute<TQ, <#= queryConstraints #>>(
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>, new()
		{
			var q = new TQ();
			return Execute<TQ, <#= queryConstraints #>>(ref q, query);
		}

		public int Execute<TQ, <#= queryConstraints #>>(
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>, new()
		{
			var q = new TQ();
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		public int Execute<TQ, <#= queryConstraints #>>(
			TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, query);
		}

		public int Execute<TQ, <#= queryConstraints #>>(
			TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		public int Execute<TQ, <#= queryConstraints #>>(
			ref TQ q,
			QueryDescription? query = null
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>
		{
			return Execute<TQ, <#= queryConstraints #>>(ref q, ref query);
		}

		public int Execute<TQ, <#= queryConstraints #>>(
			ref TQ q,
			ref QueryDescription? query
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>
		{
			query ??= GetCachedQuery<<#= queryConstraints #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

<# for (var k = 0; k < i; k++)
{
#>
			var c<#= k #> = ComponentID<T<#= k #>>.ID;
<#
}
#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				count += archetype.EntityCount;

				using var enumerator = archetype.GetChunkEnumerator();
                while (enumerator.MoveNext())
				{
					var chunk = enumerator.Current;
					Debug.Assert(chunk != null);

					var entities = chunk.Entities;
					if (entities.Length == 0)
						continue;

<# for (var k = 0; k < i; k++)
{
#>
					var t<#= k #> = chunk.GetSpan<T<#= k #>>(c<#= k #>);
					Debug.Assert(t<#= k #>.Length == entities.Length);
<#
}
#>

					unsafe
					{
						#pragma warning disable CS8500 // This takes the address of, gets the size of, or declares a pointer to a managed type
						fixed (Entity* eptr = entities)
<# for (var k = 0; k < i; k++)
{
#>
						fixed (T<#= k #>* t<#= k #>ptr = t<#= k #>)
<#
}
#>
						#pragma warning restore CS8500
						{
							for (var i = 0; i < entities.Length; i++)
								q.Execute(eptr[i], <#= CallParametersPtr(i) #>);
						}
					}
				}
			}

			return count;
		}

		public int ExecuteParallel<TQ, <#= queryConstraints #>>(
			TQ q,
			QueryDescription? query = null,
			int batchSize = 64
		)
			where <#= Constraints(i, 12) #>
			where TQ : <#= Name(i) #><<#= queryConstraints #>>
		{
			query ??= GetCachedQuery<<#= queryConstraints #>>();

			var archetypes = query.GetArchetypes();
			if (archetypes.Count == 0)
				return 0;

			batchSize = Math.Clamp(batchSize, 1, Archetype.CHUNK_SIZE);

	<# for (var k = 0; k < i; k++)
	{
	#>
		var c<#= k #> = ComponentID<T<#= k #>>.ID;
	<#
	}
	#>

			var count = 0;
			foreach (var archetypeMatch in archetypes)
			{
			    var archetype = archetypeMatch.Archetype;
				if (archetype.EntityCount == 0)
					continue;

				count += archetype.EntityCount;

				using var enumerator = archetype.GetChunkEnumerator();
                while (enumerator.MoveNext())
				{
					var chunk = enumerator.Current;
					Debug.Assert(chunk != null);

					var entityCount = chunk.EntityCount;
					if (entityCount == 0)
						continue;

					var numBatches = (int)Math.Ceiling(entityCount / (float)batchSize);

<# for (var k = 0; k < i; k++)
{
#>
					var t<#= k #> = chunk.GetComponentArray<T<#= k #>>(c<#= k #>);
<#
}
#>

					Parallel.For(0, numBatches, b =>
                    {
						var start = b * batchSize;
						var end = Math.Min(start + batchSize, entityCount);

						var entities = chunk.Entities;
						for (var i = start; i < end; i++)
							q.Execute(entities[i], <#= CallParameters(i) #>);
					});
				}
			}

			return count;
		}
	}
}
<#
}
#>


<#+ 
	static string Constraints(int count, int spaces = 4)
    {
		var prefix = new string(' ', spaces);
        var str = string.Join(
			$"\r\n{prefix}where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Name(int mutable)
	{
		return "IQuery" + mutable;
	}

	static string Refs(int start, int count)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}[i]")
        );

        return str;
    }

	static string CallParametersPtr(int count)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"ref t{x}ptr[i]")
        );

        return str;
    }
#>