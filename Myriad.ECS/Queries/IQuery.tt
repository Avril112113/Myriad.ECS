<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	const int PARAM_COUNT = 9;
#>
using Myriad.ECS.Worlds;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery

namespace Myriad.ECS.Queries;

public interface IQuery
{
	public int Execute(QueryDescription query, World world);

	public int ExecuteParallel(QueryDescription query, World world);
}

<# for (var i = 0; i <= PARAM_COUNT; i++)
{
	for (var j = 0; j <= PARAM_COUNT; j++)
	{
		if (i + j == 0)
			continue;
		var sumij = i + j;
#>
public interface <#= Name(i, j) #><<#= string.Join(", ", Enumerable.Range(0, sumij).Select(x => "T" + x)) #>>
    : IQuery
    where <#= Constraints(sumij) #>
{
	void Execute(Entity e, <#= Refs(0, i, j > 0) #><#= Ins(i, j) #>);

    int IQuery.Execute(QueryDescription query, World world)
    {
		var archetypes = query.GetArchetypes();

		var count = 0;
        for (var a = 0; a < archetypes.Count; a++)
        {
			var archetype = archetypes[a].Archetype;
            if (archetype.EntityCount == 0)
                continue;

			var chunks = archetype.Chunks;
            for (var c = chunks.Count - 1; c >= 0; c--)
            {
				var chunk = chunks[c];

                var entities = chunk.Entities;
				if (entities.Length == 0)
				    continue;

<# for (var k = 0; k < sumij; k++)
{
#>
                var t<#= k #> = chunk.GetSpan<T<#= k #>>();
<#
}
#>

                count += entities.Length;

				for (var i = entities.Length - 1; i >= 0; i--)
                    Execute(entities[i], <#= CallParameters(sumij, i, j) #>);
            }
        }

		return count;
    }

	int IQuery.ExecuteParallel(QueryDescription query, World world)
    {
		var archetypes = query.GetArchetypes();

		var count = 0;
        for (var a = 0; a < archetypes.Count; a++)
        {
			var archetype = archetypes[a].Archetype;
            if (archetype.EntityCount == 0)
                continue;

			Parallel.For(0, archetype.Chunks.Count, c =>
            {
				var chunk = archetype.Chunks[c];

                var entities = chunk.Entities;
				if (entities.Length == 0)
				    return;

<# for (var k = 0; k < sumij; k++)
{
#>
                var t<#= k #> = chunk.GetSpan<T<#= k #>>();
<#
}
#>

                Interlocked.Add(ref count, entities.Length);

				for (var i = entities.Length - 1; i >= 0; i--)
                    Execute(entities[i], <#= CallParameters(sumij, i, j) #>);
            });
        }

		return count;
    }
}

<#
	}
}
#>


<#+ 
	static string Constraints(int count)
    {
        var str = string.Join(
			"\r\n    where ",
			Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
		);

		return str;
    }

	static string Mod(int index, int mutable, int @readonly)
	{
		return index < mutable ? "ref" : "ref";
	}

	static string Name(int mutable, int @readonly)
	{
		return "IQuery" + new string('W', mutable) + new string('R', @readonly);
	}

	static string Refs(int start, int count, bool comma)
	{
		var str = string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref T{x} t{x}")
		);

		if (count > 0 && comma)
			str += ", ";

		return str;
	}

	static string Ins(int start, int count)
	{
		return string.Join(
			", ",
			Enumerable.Range(start, count).Select(x => $"ref readonly T{x} t{x}")
		);
	}

    static string CallParameters(int count, int mutable, int @readonly)
    {
        var str = string.Join(
            ", ",
            Enumerable.Range(0, count).Select(x => $"{Mod(x, mutable, @readonly)} t{x}[i]")
        );

        return str;
    }
#>