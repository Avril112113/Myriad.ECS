<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    const int PARAM_COUNT = 16;
#>
using Myriad.ECS.IDs;
using Myriad.ECS.Queries;
using System.Diagnostics.CodeAnalysis;

// ReSharper disable UnusedType.Global
// ReSharper disable UnusedParameter.Global
// ReSharper disable LoopCanBeConvertedToQuery
// ReSharper disable CheckNamespace
// ReSharper disable ArrangeAccessorOwnerBody

namespace Myriad.ECS.Worlds;

public partial class World
{
    /// <summary>
    /// Count how many entities exist
    /// </summary>
    /// <returns></returns>
    public int Count()
    {
        var count = 0;
        foreach (var archetype in Archetypes)
            count += archetype.EntityCount;
        return count;
    }

    /// <summary>
    /// Count how many entities match this query
    /// </summary>
    /// <param name="query"></param>
    /// <returns></returns>
    public int Count(QueryDescription query)
    {
        return query.Count();
    }

<#
for (var i = 1; i <= PARAM_COUNT; i++)
{
    var tparams = string.Join(", ", Enumerable.Range(0, i).Select(x => "T" + x));
    tparams = $"<{tparams}>";
#>
    /// <summary>
    /// Count how many entities exist which include all given components
    /// </summary>
    /// <returns></returns>
    <#= CoverageAttribute(i) #>
    public int Count<#= tparams #>()
        <#= Constraints(i, 8) #>
    {
        var query = GetCachedQuery<#= tparams #>();
        return query.Count();
    }

    /// <summary>
    /// Count how many entities exist which include all given components
    /// </summary>
    /// <returns></returns>
    <#= CoverageAttribute(i) #>
    public int Count<#= tparams #>(ref QueryDescription? query)
        <#= Constraints(i, 8) #>
    {
        QueryBuilder? builder = null;
        if (query != null)
        {
<#
for (var j = 0; j < i; j++)
{
#>
            var c<#= j #> = ComponentID<T<#= j #>>.ID;
            if (!query.IsIncluded(c<#= j #>))
            {
                builder ??= query.ToBuilder();
                builder.Include(c<#= j #>);
            }

<#
}
#>
            if (builder != null)
                query = builder.Build(query.World);
        }
        else
        {
            query = GetCachedQuery<#= tparams #>();
        }

        return query.Count();
    }

<#
}
#>
}

<#+ 
    static string CoverageAttribute(int index)
	{
		if (index < 3)
			return "";
		return "[ExcludeFromCodeCoverage]";
	}

    static string Constraints(int count, int spaces = 4)
    {
        if (count == 0)
            return "";

        var prefix = new string(' ', spaces);
        var str = "where " + string.Join(
            $"\r\n{prefix}where ",
            Enumerable.Range(0, count).Select(x => $"T{x} : IComponent")
        );

        return str;
    }
#>